

//****************************** Sensor Data **************************************************
#include <stdlib.h>
#include <dht11.h>
#include <SD.h>
#include <SPI.h>
#include <Bridge.h>
#include <Wire.h>

File myFile;
File userFile;
bool tempData = false;

dht11 DHT11;

#define DHT11PIN A1
const int chipSelect = 49;

float temperature;
float humidity;
float Ozone;

int pin = 22;
int start = 0;
unsigned long duration;
unsigned long starttime;
unsigned long sampletime_ms = 30000;
unsigned long lowpulseoccupancy = 0;
float ratio = 0;
float concentration = 0;
int toPostConcentration = 0;
bool readPM = false ;

//********************************* GPS Data **************************************************
#include <call.h>
#include <gps.h>
#include <GSM.h>
#include <HWSerial.h>
#include <inetGSM.h>
#include <LOG.h>
#include <SIM900.h>
#include <sms.h>
#include <Streaming.h>
#include <WideTextFinder.h>

//#include "TinyGPS.h"
#include <TinyGPS.h>
TinyGPS gps;

#define GPS_TX_DIGITAL_OUT_PIN 7
#define GPS_RX_DIGITAL_OUT_PIN 6
#define PowerModeSwitch A0

long startMillis;
long secondsToFirstLocation = 0;

#define DEBUG
// define the date and time
int year = 0;
byte month = 0;
byte day = 0;
byte hour = 0;
byte minute = 0;
byte second = 0;
byte hundredths = 0;

// define the location 
float latitude = 0.0;
float longitude = 0.0;
float altitude = 0.0;

// define the speed, satellites and precision
float speed_mps = 0.0;
float satellites = 0.0;
float hdop = 0.0;

//********************************* SMS Data ********************************************
#include <call.h>
#include <gps.h>
#include <GSM.h>
#include <HWSerial.h>
#include <inetGSM.h>
#include <LOG.h>
#include <SIM900.h>
#include <sms.h>
#include <Streaming.h>
#include <WideTextFinder.h>
#include <string.h>

// define SMS 
char sms_rx[122]; //Received text SMS
byte type_sms=SMS_ALL;      //Type of SMS
byte del_sms=1;                //0: No deleting sms - 1: Deleting SMS
char number_incoming[20];
char data_sms[140];

SMSGSM sms;
int error;
boolean started=false;
bool newData = false;

// define conponents in message
char sms_temperature[6];
char sms_humidity[6];
char sms_ratio[6];
char sms_concentration[20];
char sms_ozone[6];
char sms_year[4];
char sms_mon[3];
char sms_day[3];
char sms_hour[3];
char sms_min[3];
char sms_sec[3];
char sms_lon[12];
char sms_lat[12];
char sms_datalog[2];;

//************************* Define the thingspeak information *****************************
InetGSM inet;

char msg[50];
int numdata;
char inSerial[50];
int i = 0;
long channelId = xxxxxx;
char datastreamId[] = "1";
bool GPSworks = false;
int failtimes = 0;
int datalog = 0; // to tell if Arduino is recording all data to SD card. 0 - false; 1 - true;

// ThingSpeak Channel: New KCCA Prototyping channel
char thingSpeakAddress[] = "xxx.xxx.xxx.xxx";
char writeAPIKey[] = "xxxxxxxxxxxx";
const int updateThingSpeakInterval = 300 * 1000;      // Time interval in milliseconds to update ThingSpeak (number of seconds * 1000 = interval)
char sentMsg[50];

//************************************************************************************************
void setup()
{ 
  
  Serial.begin(9600);
  Serial.println("Pre-Charge Mode(Wait 60 seconds)");
  //delay(60000);
  
  //**********Initialize GPS function********//
  // Serial2 is GPS
  Serial2.begin(9600);
  pinMode(PowerModeSwitch, OUTPUT);
  digitalWrite(PowerModeSwitch, HIGH);
  // prevent controller pins 7 and 6 from interfering with the comms from GPS
  pinMode(GPS_TX_DIGITAL_OUT_PIN, INPUT);
  pinMode(GPS_RX_DIGITAL_OUT_PIN, INPUT);


 
  startMillis = millis();
  Serial.println("GPS is starting");
  
  //**********Initialnize GSM function********//
  
  startupGSM900();
  if(started)
  {
    //delete all sms message
//    Serial.println("Deleting SMS");
//    char error = DeleteAllSMS();
//    if (error==1)
//      {Serial.println("All SMS deleted");}      
//    else
//     {Serial.println("SMS not deleted");} 
    // attach the GPRS
    startupGPRS();
  }
  else
  {Serial.println("SIM900 NOT EXISTED"); }
  
  //***********Initialnize SD card***********// 
  Serial.print("Initializing SD card...");
  if (!SD.begin(chipSelect)) { 
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("Done.");
  Serial.println(' ');
  pinMode(12,INPUT);
  starttime = millis();// start timer, millis() means current time
}
//************************************ Loop function *********************************************
void loop()
{
    if ( start < 5)
        {
          digitalWrite(PowerModeSwitch, HIGH);
      
//        startupGSM900();
//        startupGPRS();
          Check_Air();
          
                 }
      else{
          digitalWrite(PowerModeSwitch, LOW);
          started = false;
          Serial.println("POWER SAVE MODE ACTIVATED FOR 10 MINUTES");
          //delay(10*60000);
         //delay(60*100);
         digitalWrite(PowerModeSwitch, HIGH);
         Serial.println("WAKING GPS AND GPRS");
          startupGSM900();
           if(started)
        {
          startupGPRS();
        }
        else
        {
          Serial.println("SIM900 NOT EXISTED"); 
         }
          starttime = millis();
          startupGSM900();
          startupGPRS();
        start = 0;
        }
}
//************************************************************************************************
double Fahrenheit(double celsius) //Celsius to Fahrenheit conversion
{
  return 1.8 * celsius + 32;
}

//************************************************************************************************
void startupGSM900()
{
  if (gsm.begin(9600)) {
       Serial.println("\nGSM status = READY");
       gsm.forceON();        //To ensure that SIM908 is not only in charge mode
       started=true;
  } else Serial.println("\nGSM status = IDLE");
}

//************************************************************************************************
void startupGPRS()
{
  gsm.SimpleWrite("AT");
    delay(1000);
    gsm.WhileSimpleRead();
    //GPRS attach, put in order APN, username and password.
    //If no needed auth let them blank.

    if (inet.attachGPRS("internet", "", ""))
    Serial.println("status=ATTACHED");
    else Serial.println("status=ERROR");
    delay(1000);

    gsm.SimpleWriteln("AT+CIPSTATUS");
    //gsm.SimpleWriteln("AT+CIPMUX=0");
    //Read IP address.
    gsm.SimpleWriteln("AT+CIFSR");

    delay(5000);

    //Read until serial buffer is empty.
    gsm.WhileSimpleRead();
}

//************************************************************************************************
void Check_Air() // Check the current air quality
{ 
  duration = pulseIn(pin, LOW);//use pulseIn function to record LOW signal time (search in Arduino website for more information)
  lowpulseoccupancy = lowpulseoccupancy+duration;// we need to generate the total low pulse time until a full sampling period 30s
  Serial.print("In the loop, low pulse occupancy is : ");
  Serial.println(lowpulseoccupancy);

  // if 30s passed, start to calculat the dust data
  if ((millis()-starttime) > sampletime_ms && readPM == false)
  {
    Serial.println("30s passed now, and system is calculating the dust/PM data.\n");
    ratio = lowpulseoccupancy/(sampletime_ms*10.0); //ratio = (lowpulseoccupancy / 1 000 ) /sampletime_ms) *100
    // ratio is the percentage of low pulse duration in one period, from 0 to 100. 
    concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // use the spec sheet curve, read user manual 4.2.2
    toPostConcentration = (int)concentration;
    
    readPM = true;
  }

  // if 60s passed, start to log data and upload online
  else if ((millis()-starttime) > 60000)
  {
    Serial.println("60s passed now, and system is logging data and uploading it online.\n");
    Read_DHT();
    Read_Status();
    readLocation();
    Check_SMS();
    recordAllData();
    //if (GPSworks)
    //{thingspeakPost();}
    thingspeakPost();
    starttime = millis();
    readPM = false;
    lowpulseoccupancy = 0; 
    start++;
  }
}

void Read_DHT()
{
  //********Check the temperature and humanity sensor status**********//
  int chk = DHT11.read(DHT11PIN);
  Serial.print("Read sensor: ");
  switch (chk)
  {
    case DHTLIB_OK: 
    Serial.println("OK");
    tempData = true; 
    break;
    case DHTLIB_ERROR_CHECKSUM: 
    Serial.println("Checksum error"); 
    break;
    case DHTLIB_ERROR_TIMEOUT: 
    Serial.println("Time out error"); 
    break;
    default: 
    Serial.println("Unknown error"); 
    break;
  }
}

void Read_Status()
{
  //********Check the Ozone SM50 sensor data**********//
   
  //Print out the data from DHT11 sensor
  Serial.print("Temperature (°C): ");
  Serial.println((float)DHT11.temperature, 2);  
  Serial.print("Humidity (%): ");
  Serial.println((float)DHT11.humidity, 2);
  Serial.print("Temperature (°F): ");
  Serial.println(Fahrenheit(DHT11.temperature), 2);
  Serial.print("lowpulseoccupancy :");
  Serial.print(lowpulseoccupancy);
  Serial.print("us = ");
  Serial.print (lowpulseoccupancy/1000);
  Serial.print("ms");
  Serial.print(" | ");
  Serial.print("ratio : ");
  Serial.print(ratio);
  Serial.print(" | ");
  Serial.print("concentration : ");
  Serial.print(concentration);
  Serial.println("pcs/283ml");
 
}
//************************************************************************************************
void Check_SMS()  //Check if there is an sms 'type_sms'
 {
     char pos_sms_rx;  //Received SMS position     
     pos_sms_rx=sms.IsSMSPresent(type_sms);
     if (pos_sms_rx!=0)
     {
       //Read text/number/position of sms
       sms.GetSMS(pos_sms_rx,number_incoming,15,sms_rx,120);
       Serial.print("Received SMS from ");
       Serial.print(number_incoming);
       Serial.print("(sim position: ");
       Serial.print(word(pos_sms_rx));
       Serial.println(")");
       Serial.println(sms_rx);
       if (del_sms==1)  //If 'del_sms' is 1, i delete sms 
       {
         error=sms.DeleteSMS(pos_sms_rx);
         if (error==1)Serial.println("SMS deleted");      
         else Serial.println("SMS not deleted");
       }

       // Check the receiving message is "air"
       if((strstr(sms_rx,"air")!=0)&&(strlen(sms_rx)==3))
       {
          // store the coming number in SD card
          recordUserData();

          // send the message
          Serial.println("\nsending SMS");
          // if newData is true, that means there is new data received from GPS.
          if(newData)
          {
            if (sms.SendSMS(number_incoming, data_sms))
              Serial.println("\nSMS sent OK");
            else
              Serial.println("\nSMS sent error");        
          }
          else
          {
            if (sms.SendSMS(number_incoming, "GPS is not ready."))
              Serial.println("\nSMS sent OK");
            else
              Serial.println("\nSMS sent error");                                                
          }                                 
       }
     Serial2.flush();
                 
     }
     newData = false;
     return;
 }

//***************************************************************************************************//
char DeleteAllSMS()
{
     char ret_val = -1;
     
     if (CLS_FREE != gsm.GetCommLineStatus()) return (ret_val);
     gsm.SetCommLineStatus(CLS_ATCMD);
     ret_val = 0; // still not present
          
     gsm.SimpleWriteln(F("AT+CMGDA=\"DEL ALL\""));
          
     switch (gsm.WaitResp(8000, 50, "OK")) {
     case RX_TMOUT_ERR:
          // response was not received in specific time
          ret_val = -2;
          break;
 
     case RX_FINISHED_STR_RECV:
          // OK was received => SMS deleted
          ret_val = 1;
          break;
 
     case RX_FINISHED_STR_NOT_RECV:
          // other response: e.g. ERROR => SMS was not deleted
          ret_val = 0;
          break;
     }
     
     gsm.SetCommLineStatus(CLS_FREE);
     return (ret_val);         
}


//***************************************************************************************************//
void readLocation(){
  
  unsigned long chars = 0;
  unsigned short sentences, failed;

  // For one second we parse GPS data and report some key values
  for (unsigned long start = millis(); millis() - start < 1000;)
  {
    while (Serial2.available())
    {
      int c = Serial2.read();
      //Serial.print((char)c); // if you uncomment this you will see the raw data from the GPS
      ++chars;
      if (gps.encode(c)) // Did a new valid sentence come in?
        newData = true;
    }
  }
  
  if (newData)
  {
    // we have a location fix so output the lat / long and time to acquire
    if(secondsToFirstLocation == 0){
      secondsToFirstLocation = (millis() - startMillis) / 1000;
      Serial.print("Acquired in:");
      Serial.print(secondsToFirstLocation);
      Serial.println("s");
    }
    
    unsigned long age;
    // extract related data from GPS signal
    gps.crack_datetime(&year, &month, &day, &hour, &minute, &second, &hundredths, &age);
    
    gps.f_get_position(&latitude, &longitude, &age);    
    latitude == TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : latitude;
    longitude == TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : longitude;
    
    altitude = gps.f_altitude();
    altitude == TinyGPS::GPS_INVALID_F_ALTITUDE ? 0.0 : altitude;
    
    speed_mps = gps.f_speed_mps();
    speed_mps == TinyGPS::GPS_INVALID_F_SPEED ? 0.0 : speed_mps;

    satellites = gps.satellites();
    satellites == TinyGPS::GPS_INVALID_SATELLITES ? 0 : satellites;

    hdop = gps.hdop();
    hdop == TinyGPS::GPS_INVALID_HDOP ? 0.0 : hdop;

    Serial.println("GPS is working!");
    GPSworks = true;

    //********** Convert the existing data into string *****************//
    dtostrf(DHT11.temperature, 5, 2, sms_temperature);
    dtostrf(DHT11.humidity, 5, 2, sms_humidity);
    dtostrf(ratio, 5, 2, sms_ratio);
    dtostrf(concentration, 8, 2, sms_concentration);
   // itostr(concentration, 8, 2, sms_concentration);
   //dtostrf(CarbonMonoxideValue, 5 , 4, sms_CarbonMonoxide);
    dtostrf(latitude, 10, 6, sms_lat); 
    dtostrf(longitude, 10 , 6, sms_lon);
    
    
    //********** Combine strings into the data message *****************//
    strcpy(data_sms,"Temperature:");    
    strcat(data_sms,sms_temperature);
    strcat(data_sms,"\n");
    strcat(data_sms,"Humidity:"); 
    strcat(data_sms,sms_humidity);
    strcat(data_sms,"\n");
    strcat(data_sms,"ratio:");
    strcat(data_sms,sms_ratio);
    strcat(data_sms,"\n");
    strcat(data_sms,"Concentration:");
    strcat(data_sms,sms_concentration);
    //strcat(data_sms,"\n");
    //strcat(data_sms,"CarbonMonoxide:");
    //strcat(data_sms,sms_CarbonMonoxide);
    strcat(data_sms,"\n");
    strcat(data_sms,"Latitude:");
    strcat(data_sms,sms_lat);
    strcat(data_sms,"\n");
    strcat(data_sms,"Longitude:");
    strcat(data_sms,sms_lon);    
    strcat(data_sms,"\n");

    //we comment the following part so that there will be no time infomation in the message which is prepared to send for user.
    /*
    strcat(data_sms,"Time:");

    itoa(year,sms_year,10);
    strcat(data_sms,sms_year);
         
    itoa(month,sms_mon,10);
    if(strlen(sms_mon)==1)
      strcat(data_sms,"0");
    strcat(data_sms,sms_mon);
         
    itoa(day,sms_day,10);
    if(strlen(sms_day)==1)
      strcat(data_sms,"0");
    strcat(data_sms,sms_day);
         
    itoa(hour,sms_hour,10);
    if(strlen(sms_hour)==1)
      strcat(data_sms,"0");
    strcat(data_sms,sms_hour);
         
    itoa(minute,sms_min,10);
    if(strlen(sms_min)==1)
      strcat(data_sms,"0");
    strcat(data_sms,sms_min);
         
    itoa(second,sms_sec,10);
    if(strlen(sms_sec)==1)
      strcat(data_sms,"0");
    strcat(data_sms,sms_sec);
    */
  }

  // print out the message in I/O port for checking
  Serial.println(data_sms);
  
  if (chars == 0){
    // if you haven't got any chars then likely a wiring issue
    Serial.println("Check wiring");
  }
  else if(secondsToFirstLocation == 0){
    // still working
  }
}


//*************************************************************************************************************
void recordAllData()
{
  myFile = SD.open("AQULDA.txt", FILE_WRITE);
  if (myFile) {
    Serial.print("Writing to AQULDA.txt...");
    //myFile.print("Temperature: "); 
     myFile.println(' ');    
    myFile.print((float)DHT11.temperature, 2);
    myFile.print("\t"); 
    myFile.print((float)DHT11.humidity, 2);
    myFile.print("\t");
    myFile.print((float)ratio, 2);
    myFile.print("\t");
    myFile.print((float)concentration, 2);
    myFile.print("\t");
    myFile.print("\t");
    //myFile.print((float)CarbonMonoxideValue);
    //int carbonMonoxidePercentage = ((CarbonMonoxideValue/1023)*100);
    //myFile.print("\t");
    //myFile.print(carbonMonoxidePercentage);
  
    myFile.print("\t");
    myFile.print(year);
    myFile.print(",");
    myFile.print(month);
    myFile.print(",");
    myFile.print(day);
    myFile.print("  ");
    myFile.print(hour);
    myFile.print(":");
    myFile.print(minute);
    myFile.print(":");
    myFile.print(second);
    myFile.print(":");
    myFile.print(hundredths);
    myFile.print("\t: ");
    myFile.print(latitude, 6);
    myFile.print(" , ");
    myFile.print(longitude, 6);
    myFile.print(" , ");
    myFile.print(altitude, 6);
    myFile.print("SAT=");
    myFile.print(satellites, 0);
    myFile.print(" PREC=");
    myFile.print(hdop/100);
    myFile.print(" Speed= ");
    myFile.print(speed_mps);
    myFile.print("m/s");
    //myFile.println(' '); 
    myFile.close();   
    Serial.println("OK.");
    datalog = 1;
  } else {
    // if the file didn't open, print an error:
    Serial.println("error in opening AQULDA.txt");  
    datalog = 0;
  }
}

//***********************************************************************
void recordUserData()
{
    userFile = SD.open("users.txt", FILE_WRITE);
    if (userFile) {
        Serial.println("Recording the user number...");
        userFile.print("Received SMS from ");
        userFile.print(number_incoming);
        userFile.print(" at ");
        userFile.print(year); 
        userFile.print(",");
        userFile.print(month);
        userFile.print(",");
        userFile.print(day);
        userFile.print("  ");
        userFile.print(hour);
        userFile.print(":");
        userFile.print(minute);
        userFile.print(":");
        userFile.println(second);
        Serial.println("OK.");
    }
    userFile.close();
}

//***********************************************************************
void thingspeakPost() {
  char itoaBuffer[8];

  char end_c[2];
  end_c[0] = 0x1A;
  //end_c[1] = '\0';
  

if (inet.connectTCP(thingSpeakAddress, 80))
    {
  char concVal[20];
                  dtostrf(concentration, 8, 2, concVal);
Serial.println(sms_temperature);
Serial.println(sms_humidity);  
Serial.println(sms_ratio);  
Serial.println(concVal);  
Serial.println(datalog);  

      
                      Serial.println("connected to thingspeak");
                      gsm.SimpleWrite("POST /update HTTP/1.1\r\n");
                      gsm.SimpleWrite("Host: api.thingspeak.com\r\n");
                      gsm.SimpleWrite("Connection: close\r\n");
                      gsm.SimpleWrite("X-THINGSPEAKAPIKEY: ");
                      gsm.SimpleWrite(writeAPIKey);
                      gsm.SimpleWrite("\r\n");
                      gsm.SimpleWrite("Content-Type: application/x-www-form-urlencoded\r\n");
                      gsm.SimpleWrite("Content-Length: ");
                  
                  //sprintf(sentMsg, "field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%d",sms_temperature,sms_humidity,sms_ratio,((float)concentration, 2),CarbonMonoxideValue,latitude,longitude,datalog);
                  //itoa(strlen(sentMsg), itoaBuffer, 10);
                  //Serial.println(toPostConcentration);
                  //Serial.println(concentration);  
                  //Serial.println(CarbonMonoxideValue);  
                  
                
                  
                  //int carbonMonoxidePercentage = ((CarbonMonoxideValue/1023)*100);
                  //Serial.println(carbonMonoxidePercentage);  
                  
                      sprintf(sentMsg, "field1=%s&field2=%s&field3=%s&field4=%s&field5=%i",sms_temperature,sms_humidity,sms_ratio,concVal,datalog);
                      itoa(strlen(sentMsg), itoaBuffer, 10);
                  
                      gsm.SimpleWrite(itoaBuffer);
                  
                      gsm.SimpleWrite("\r\n\r\n");
                  
                      gsm.SimpleWrite(sentMsg);
                  
                      gsm.SimpleWrite("\r\n\r\n");
                  
                      delay(200);
                      
                      gsm.SimpleWrite(end_c);
                      
                      
                      //gsm.SimpleWrite("AT+CIPCLOSE");
                  
                      Serial.println(sentMsg);
                  
                      //************************
                      failtimes = 0;
      }
      else
      {
              Serial.println("Uploading failed");
              failtimes = failtimes + 1 ;
              Serial.print("Fail times now is; ");
              Serial.println(failtimes);
              if (failtimes == 2)
              {
                        Serial.println("System will restart the GSM and GPRS");
                  //    delay(30000);
                        startupGSM900();
                        startupGPRS();
                        failtimes = 0;
                
              }   
      }
       
}
